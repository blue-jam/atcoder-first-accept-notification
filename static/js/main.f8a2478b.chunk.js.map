{"version":3,"sources":["App.tsx","util/AtcoderStandingsHandler.ts","util/utilities.ts","registerServiceWorker.ts","index.tsx"],"names":["src_App_0","_super","App","props","_this","call","this","contestIdRef","react","state","solvedProblems","Set","tasksMap","Map","tslib_es6","prototype","render","fetchAndNotifyFirstAccepts","current","Notification","permission","contestId","value","fetch","then","response","json","fetchStandingsJson","_a","sent","Object","keys","TaskInfo","forEach","key","set","TaskScreenName","Assignment","contestantStandings","contestant","TaskResults","filter","problemId","Status","add","getSolvedProblems","StandingsData","currentSolvedProblems","lastSolvedProblems","this_1","newSolvedProblems","Array","from","problem","has","newAccepts","notificationMessage","taskMap","size","map","screenName","get","join","generateNotificationMessage","setState","delay","result","Promise","resolve","setTimeout","sleep","className","type","name","ref","onClick","requestPermission","entries","index","assignment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","react_dom","document","getElementById","URL","toString","origin","addEventListener","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8a2478b.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport {\n    fetchStandingsJson,\n    generateNotificationMessage,\n    getNewSolvedProblems,\n    getSolvedProblems,\n    INTERVAL_MILLI_SEC\n} from \"./util/AtcoderStandingsHandler\";\nimport {sleep} from \"./util/utilities\";\n\ninterface IState {\n    tasksMap: Map<string, string>;\n    solvedProblems: Set<string>;\n}\n\nclass App extends React.Component<any, IState> {\n    private contestIdRef = React.createRef<HTMLInputElement>();\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            solvedProblems: new Set(),\n            tasksMap: new Map()\n        };\n    }\n\n    public render() {\n        const fetchAndNotifyFirstAccepts = async () => {\n            if (this.contestIdRef.current === null || Notification.permission !== 'granted') {\n                return;\n            }\n\n            const contestId = this.contestIdRef.current.value;\n\n            while (true) {\n                const json = await fetchStandingsJson(contestId);\n                const tasksMap = new Map();\n\n                Object.keys(json.TaskInfo).forEach(\n                    (key) => tasksMap.set(json.TaskInfo[key].TaskScreenName, json.TaskInfo[key].Assignment)\n                );\n\n                const solvedProblems = getSolvedProblems(json.StandingsData);\n                const newAccepts = getNewSolvedProblems(solvedProblems, this.state.solvedProblems);\n                const notificationMessage = generateNotificationMessage(newAccepts, tasksMap);\n\n                if (notificationMessage !== null && Notification.permission === 'granted') {\n                    new Notification(notificationMessage);  // eslint-disable-line no-unused-expression\n                }\n\n                this.setState({tasksMap, solvedProblems});\n\n                await sleep(INTERVAL_MILLI_SEC, null);\n            }\n        };\n\n        const onWatchClick = async () => {\n            Notification.requestPermission(fetchAndNotifyFirstAccepts);\n        };\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">AtCoder First Accept Notification</h1>\n                </header>\n                <div>\n                    <input type=\"text\" name=\"contestId\" ref={this.contestIdRef}/>\n                    <button type=\"button\" onClick={onWatchClick}>watch</button>\n                    <button type=\"button\">stop</button>\n                    <button type=\"button\">reset</button>\n                </div>\n                <div>\n                    <table>\n                        <thead><tr><th>Problem</th><th>Accepted</th></tr></thead>\n                        <tbody>\n                            {\n                                Array.from(this.state.tasksMap.entries())\n                                    .map(([screenName, assignment], index) => (\n                                        <tr key={index}>\n                                            <td>{assignment}</td>\n                                            <td>{this.state.solvedProblems.has(screenName) ? 'O' : '-'}</td>\n                                        </tr>\n                                    ))\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","export interface ITaskResult {\n    Status: number\n}\n\nexport interface IContestantStanding {\n    TaskResults: { [s: string]: ITaskResult };\n}\n\nexport const INTERVAL_MILLI_SEC = 60000;\n\nexport const fetchStandingsJson = (contestId: string) => {\n    return fetch(`https://cors-anywhere.herokuapp.com/https://beta.atcoder.jp/contests/${contestId}/standings/json`)\n        .then((response) => response.json())\n};\n\nexport const getSolvedProblems = (contestantStandings: IContestantStanding[]) => {\n    const solvedProblems = new Set();\n\n    contestantStandings.forEach((contestant) => {\n        Object.keys(contestant.TaskResults)\n            .filter((problemId) => contestant.TaskResults[problemId].Status === 1)\n            .forEach((problemId) => solvedProblems.add(problemId));\n    });\n\n    return solvedProblems;\n};\n\nexport const getNewSolvedProblems = (currentSolvedProblems: Set<string>, lastSolvedProblems: Set<string>) => {\n    const newSolvedProblems = Array.from(currentSolvedProblems)\n        .filter(problem => !lastSolvedProblems.has(problem));\n\n    return new Set(newSolvedProblems);\n};\n\nexport const generateNotificationMessage = (newSolvedProblems: Set<string>, taskMap: Map<string, string>) => {\n    if (newSolvedProblems.size === 0) {\n        return null;\n    }\n\n    const solvedList = Array.from(newSolvedProblems)\n        .map((screenName) => taskMap.get(screenName))\n        .join(', ');\n\n    return `There are first accepts.\\nProblem: ${solvedList}\\nPlease check standings.`;\n};\n","export async function sleep(delay: number, result: any) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(result), delay);\n    });\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}